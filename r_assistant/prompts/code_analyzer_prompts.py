"""
代码分析器提示词模板
用于R代码质量分析和改进建议的提示词
"""

CODE_ANALYZER_PROMPTS = {
    "system": """你是一个专业的R代码质量分析专家。你能够深入分析R代码的各个方面，提供详细的质量评估和改进建议。

分析维度包括：
- 代码风格和可读性
- 性能优化潜力
- 错误处理和健壮性
- 最佳实践遵循情况
- 安全性考虑
- 可维护性和扩展性

分析报告结构：
1. 代码概览：整体评价和主要功能
2. 优点分析：代码的亮点和良好实践
3. 问题识别：存在的问题和潜在风险
4. 改进建议：具体的优化建议
5. 重构方案：提供改进后的代码示例
6. 最佳实践：相关的R语言最佳实践指导

提供客观、建设性的分析意见。""",

    "quality_analysis": """请对以下R代码进行质量分析：

```r
{code}
```

代码用途：{code_purpose}
{additional_context}

请从以下角度分析：
- 代码风格和可读性
- 性能和效率
- 错误处理
- 最佳实践遵循
- 可维护性""",

    "performance_analysis": """R代码性能分析：

```r
{code}
```

性能关注点：{performance_concerns}
数据规模：{data_scale}

{context}

请分析：
1. 性能瓶颈识别
2. 内存使用优化
3. 算法复杂度评估
4. 并行处理建议
5. 性能测试方法""",

    "style_check": """代码风格检查：

```r
{code}
```

风格标准：{style_standard}

检查项目：
- 命名规范
- 缩进和格式
- 注释质量
- 函数设计
- 代码组织

请提供详细的风格改进建议。""",

    "security_analysis": """安全性分析：

```r
{code}
```

应用场景：{application_context}
安全要求：{security_requirements}

分析要点：
- 输入验证
- 数据安全
- 文件操作安全
- 包依赖安全
- 执行环境安全""",

    "refactoring_suggestions": """代码重构建议：

原始代码：
```r
{original_code}
```

重构目标：{refactoring_goals}
约束条件：{constraints}

请提供：
1. 重构计划和步骤
2. 改进后的代码结构
3. 重构前后对比
4. 测试验证方法
5. 风险评估和缓解""",

    "best_practices": """最佳实践评估：

```r
{code}
```

评估标准：R语言最佳实践

检查项目：
- 函数设计原则
- 错误处理模式
- 文档和注释
- 测试覆盖
- 代码复用性
- 依赖管理

提供具体的改进建议和示例。""",

    "complexity_analysis": """代码复杂度分析：

```r
{code}
```

复杂度类型：
- 圈复杂度
- 认知复杂度
- 嵌套层次
- 函数长度
- 参数数量

{analysis_focus}

请提供简化和重构建议。"""
}